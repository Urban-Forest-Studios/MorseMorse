// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var lessons = Lessons.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Lessons
    {
        [JsonProperty("lessons")]
        public List<Lesson> LessonsLessons { get; set; }
    }

    public partial class Lesson
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("questions")]
        public List<QuestionElement> Questions { get; set; }
    }

    public partial class QuestionClass
    {
        [JsonProperty("question")]
        public string Question { get; set; }
    }

    public partial struct QuestionElement
    {
        public QuestionClass QuestionClass;
        public string String;

        public static implicit operator QuestionElement(QuestionClass QuestionClass) => new QuestionElement { QuestionClass = QuestionClass };
        public static implicit operator QuestionElement(string String) => new QuestionElement { String = String };
    }

    public partial class Lessons
    {
        public static Lessons FromJson(string json) => JsonConvert.DeserializeObject<Lessons>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Lessons self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                QuestionElementConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class QuestionElementConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(QuestionElement) || t == typeof(QuestionElement?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new QuestionElement { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<QuestionClass>(reader);
                    return new QuestionElement { QuestionClass = objectValue };
            }
            throw new Exception("Cannot unmarshal type QuestionElement");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (QuestionElement)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.QuestionClass != null)
            {
                serializer.Serialize(writer, value.QuestionClass);
                return;
            }
            throw new Exception("Cannot marshal type QuestionElement");
        }

        public static readonly QuestionElementConverter Singleton = new QuestionElementConverter();
    }
}
